[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeTransformVecMult" id=11]

[sub_resource type="VisualShaderNodeInput" id=12]
input_name = "camera"

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 2.0, 1, 0.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=18]

[sub_resource type="VisualShaderNodeFresnel" id=2]
default_input_values = [ 2, false, 3, 2.0 ]

[sub_resource type="VisualShaderNodeScalarOp" id=3]

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "show_time"

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVec3Uniform" id=15]
uniform_name = "impact_location"

[sub_resource type="VisualShaderNodeVectorDistance" id=16]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "vertex"

[resource]
code = "shader_type spatial;
render_mode unshaded;

uniform vec3 impact_location;
uniform float show_time;



void vertex() {
// Output:0

}

void fragment() {
// Fresnel:2
	bool n_in2p2 = false;
	float n_in2p3 = 2.00000;
	float n_out2p0;
	n_out2p0 = n_in2p2 ? (pow(clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3)) : (pow(1.0 - clamp(dot(NORMAL, VIEW), 0.0, 1.0), n_in2p3));
// VectorUniform:7
	vec3 n_out7p0;
	n_out7p0 = impact_location;

// Input:13
	mat4 n_out13p0;
	n_out13p0 = CAMERA_MATRIX;

// Input:9
	vec3 n_out9p0;
	n_out9p0 = VERTEX;

// TransformVectorMult:12
	vec3 n_out12p0;
	n_out12p0 = ( n_out13p0 * vec4(n_out9p0, 1.0) ).xyz;

// Distance:8
	float n_out8p0;
	n_out8p0 = distance( n_out7p0 , n_out12p0 );

// ScalarOp:14
	float n_in14p0 = 2.00000;
	float n_out14p0;
	n_out14p0 = n_in14p0 - n_out8p0;

// ScalarClamp:16
	float n_in16p1 = 0.00000;
	float n_in16p2 = 1.00000;
	float n_out16p0;
	n_out16p0 = clamp( n_out14p0, n_in16p1, n_in16p2 );

// ScalarOp:3
	float n_out3p0;
	n_out3p0 = n_out2p0 + n_out16p0;

// ScalarUniform:5
	float n_out5p0;
	n_out5p0 = show_time;

// ScalarOp:6
	float n_out6p0;
	n_out6p0 = n_out3p0 * n_out5p0;

// Output:0
	ALPHA = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -642, 264 )
flags/unshaded = true
nodes/fragment/0/position = Vector2( 620, 80 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -120, 100 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( 180, 140 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( 180, 80 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( 400, 80 )
nodes/fragment/7/node = SubResource( 15 )
nodes/fragment/7/position = Vector2( -600, 380 )
nodes/fragment/8/node = SubResource( 16 )
nodes/fragment/8/position = Vector2( -400, 380 )
nodes/fragment/9/node = SubResource( 17 )
nodes/fragment/9/position = Vector2( -640, 480 )
nodes/fragment/12/node = SubResource( 11 )
nodes/fragment/12/position = Vector2( -440, 500 )
nodes/fragment/13/node = SubResource( 12 )
nodes/fragment/13/position = Vector2( -640, 560 )
nodes/fragment/14/node = SubResource( 13 )
nodes/fragment/14/position = Vector2( -220, 380 )
nodes/fragment/16/node = SubResource( 18 )
nodes/fragment/16/position = Vector2( 0, 400 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 5, 0, 6, 1, 7, 0, 8, 0, 3, 0, 6, 0, 9, 0, 12, 1, 13, 0, 12, 0, 12, 0, 8, 1, 6, 0, 0, 1, 8, 0, 14, 1, 14, 0, 16, 0, 16, 0, 3, 1 )
